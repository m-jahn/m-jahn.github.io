

[
  
  
    
    
      {
        "title": "Flat, yet deep - How treemaps can be used to visualize complex data",
        "excerpt": "Before we dive directly into the fun of making treemaps, one word\nregarding the past, present and future of this blog. The last post I\nmade is around one year ago (so much for the past). Many things have\nhappened in this year, first and foremost that I became father for the\nsecond time.\n\n",
        "content": "Before we dive directly into the fun of making treemaps, one word\nregarding the past, present and future of this blog. The last post I\nmade is around one year ago (so much for the past). Many things have\nhappened in this year, first and foremost that I became father for the\nsecond time.\n\nBoth family life and my professional life as researcher at Science for\nLife Lab in Stockholm do in fact leave only limited time for extra\nactivities, like this blog. This is a bit sad for me, but I see it as a\ntemporary issue. I’m still more than dedicated to this blog (present)\nand will try to post more regularly in the future. Particularly because\nso many interesting things are happening in the data sciences, and these\nthings have also changed the way I conduct my research and work with\ndata. Just to name of few, I started using\ngithub and making my own R packages. I\nwant to write and publish my data analysis pipelines as R markdown\nnotebooks. I want to get more familiar with machine learning, and so on.\nAll of these developments are worth their own posts, but now I start\nwith: treemaps.\n\nWhat are treemaps? Treemaps are extremely space-efficient yet easy to\ngrasp visualizations for data sets with two important properties: The\ndata can have both numerical and categorial character. The\nnumerical part determines the map in treemap, that means tiles or\ncells of a 2-dimensional plane are scaled according to the input. Small\nvalues become small cells and large values become large cells. The\ncategorial part determines the tree in treemap, that means one big\ncell can in turn be parent to a set of smaller cells that are nested\nwithin it. Well, a picutre is worth a thousand words so let’s look at an\nexample.\n\nBased on existing functions I have compiled an R package for creation of\nVoronoi and Sunburst treemaps,\nSysbioTreemaps,\navailable on github and maybe sooner or later on CRAN. Let’s test it.\n\n\n\nInstalling the package\n\n# install SysbioTreemaps from github\nrequire(devtools)\ndevtools::install_github(\"https://github.com/m-jahn/SysbioTreemaps\")\n\n\n# attach packages\nlibrary(SysbioTreemaps)\nlibrary(tidyverse)\n\n\n\n\nA simple example\n\nWe can use the starwars data set from the dplyr package. It’s good\nfor our purpose because it contains both numeric and categorial data.\nThe latter are name and home world of the movie characters. The cell\nsize for each character is encoded by the number of films he or she\nshowed up in.\n\ndf &lt;- dplyr::starwars %&gt;% \n  mutate(films = films %&gt;% sapply(length)) %&gt;%\n  mutate(name = substr(name, 1, 20)) %&gt;%\n  filter(!is.na(homeworld))\n  \n\n# generate voronoi treemap\ntm &lt;- voronoiTreemap(\n  data = df,\n  levels = c(\"homeworld\", \"name\"),\n  cell_size = \"films\",\n  shape = \"rounded_rect\",\n  positioning = \"clustered_by_area\"\n)\n\n\n## Level 1 tesselation:  0.19 % mean error,  1.45 % max error,  100 iterations\n## Level 2 tesselation:  0.64 % mean error,  0.96 % max error,  48 iterations\n## Level 2 tesselation:  0.97 % mean error,  0.97 % max error,  58 iterations\n## Level 2 tesselation:  0.66 % mean error,  0.99 % max error,  51 iterations\n## Level 2 tesselation:  0.66 % mean error,  0.99 % max error,  44 iterations\n## Level 2 tesselation:  0.98 % mean error,  0.98 % max error,  28 iterations\n## Level 2 tesselation:  0.97 % mean error,  0.97 % max error,  48 iterations\n## Level 2 tesselation:  0.38 % mean error,  0.87 % max error,  47 iterations\n## Level 2 tesselation:  0.89 % mean error,  0.89 % max error,  39 iterations\n## Level 2 tesselation:  0.44 % mean error,  0.93 % max error,  58 iterations\n## Treemap successfully created\n\n\n# draw the treemap\ndrawTreemap(tm, \n  label_level = 1:2,\n  label_color = c(grey(0.95), grey(0.85)),\n  label_size = c(2, 2)\n)\n\n\n\n\nSo what happened? In treemap logic, the total area of the plane was\nsubdivided into parental cells and the area of each of these parents\ncorresponds to the sum of the daughter cell’s area. All cells are\ntherefore either directly scaled according to the numerical variable, or\naggregated from daughter cells.\n\n\n\nA real world data set\n\nThis blog is called Europe by Numbers for a reason. I like to explore\ndata as much as I like to explore European countries. I have often used\nEurostat as a source for data regarding European countries, and now\nthere is the fantastic eurostat package for\nR. We can search for keywords in\nthe description of databases and then download the table of choice. In\nthis example we search expenditures for consumer goods per EU country.\n\n\nlibrary(eurostat)\n\n# download data from eurostat: we can search for purchasing power parities\nsearch_eurostat(\"Purchasing power\") %&gt;% pull(title) %&gt;% substr(1, 100)\ndf &lt;- get_eurostat(\"prc_ppp_ind\", type = \"label\", stringsAsFactors = FALSE)\n\n\nhead(df)\n\n\n## # A tibble: 6 x 5\n##   na_item                ppp_cat               geo             time       values\n##   &lt;chr&gt;                  &lt;chr&gt;                 &lt;chr&gt;           &lt;date&gt;      &lt;dbl&gt;\n## 1 Nominal expenditure (… Actual individual co… Albania         2018-01-01  10831\n## 2 Nominal expenditure (… Actual individual co… Austria         2018-01-01 246801\n## 3 Nominal expenditure (… Actual individual co… Bosnia and Her… 2018-01-01  14643\n## 4 Nominal expenditure (… Actual individual co… Belgium         2018-01-01 306521\n## 5 Nominal expenditure (… Actual individual co… Bulgaria        2018-01-01  38031\n## 6 Nominal expenditure (… Actual individual co… Switzerland     2018-01-01 353590\n\n\nThis data set is a time series of consumer goods expenditures from 1995\nto 2018, broken down per EU country. We filter the data set for a subset\nof interesting variables and countries. Particularly, we filter out\ncategories (ppp_cat) that seem to be aggregates of sub-categories, for\nexample ‘Total goods’ et cetera.\n\n# filter for specific year and member country\ndf_subset &lt;- df %&gt;% filter(\n  na_item == \"Nominal expenditure per inhabitant (in euro)\",\n  !grepl(\"Total|Capital|Gross|[Ff]inal|Actual|Food and|[Cc]ons|serv\", ppp_cat),\n  time == \"2018-01-01\"\n)\n\n# abbreviate categories\ndf_subset &lt;- df_subset %&gt;%\n  mutate(ppp_cat = substr(ppp_cat, 1, 25) %&gt;% gsub(\" \", \"\\n\", .))\n\n\nGenerate treemap and plot it.\n\n# generate voronoi treemap\ntm &lt;- voronoiTreemap(\n  data = filter(df_subset, geo %in% c(\"Sweden\", \"Finland\", \n    \"Denmark\", \"Iceland\", \"Estonia\", \"Lithuania\", \"Latvia\", \"Norway\")),\n  levels = c(\"geo\", \"ppp_cat\"),\n  cell_size = \"values\",\n  shape = \"rounded_rect\",\n  positioning = \"clustered_by_area\",\n  error_tol = 0.001,\n  maxIteration = 200\n)\n\n\n## Level 1 tesselation:  0.04 % mean error,  0.1 % max error,  168 iterations\n## Level 2 tesselation:  0.05 % mean error,  0.22 % max error,  200 iterations\n## Level 2 tesselation:  0.08 % mean error,  0.52 % max error,  200 iterations\n## Level 2 tesselation:  0.09 % mean error,  0.46 % max error,  200 iterations\n## Level 2 tesselation:  0.1 % mean error,  0.49 % max error,  200 iterations\n## Level 2 tesselation:  0.08 % mean error,  0.32 % max error,  200 iterations\n## Level 2 tesselation:  0.09 % mean error,  0.59 % max error,  200 iterations\n## Level 2 tesselation:  0.13 % mean error,  0.69 % max error,  200 iterations\n## Level 2 tesselation:  0.07 % mean error,  0.46 % max error,  200 iterations\n## Treemap successfully created\n\n\n# draw the treemap\ndrawTreemap(tm, \n  label_level = 1:2,\n  label_color = c(grey(0.95), grey(0.85)),\n  label_size = c(2, 4),\n  legend = TRUE,\n  title = \"Expenditure in € per capita, Northern Europe, 2018\"\n)\n\n\n\n\nThe same thing as it would look for Central Europe…\n\n# trim Germanys name\ndf_subset &lt;- df_subset %&gt;% mutate(geo = gsub(\"Germany.*\", \"Germany\", geo))\n\n# generate voronoi treemap\ntm &lt;- voronoiTreemap(\n  data = filter(df_subset, geo %in% c(\n      \"Germany\", \"France\", \"Poland\", \"Czechia\",\n      \"Netherlands\", \"Belgium\", \"Austria\", \"Switzerland\",\n      \"Germany (until 1990 former territory of the FRG)\",\n      \"Luxembourg\"\n    )),\n  levels = c(\"geo\", \"ppp_cat\"),\n  cell_size = \"values\",\n  shape = \"rounded_rect\",\n  positioning = \"clustered_by_area\",\n  error_tol = 0.001,\n  maxIteration = 200\n)\n\n\n## Level 1 tesselation:  0.04 % mean error,  0.1 % max error,  178 iterations\n## Level 2 tesselation:  0.06 % mean error,  0.5 % max error,  200 iterations\n## Level 2 tesselation:  0.06 % mean error,  0.46 % max error,  200 iterations\n## Level 2 tesselation:  0.09 % mean error,  0.62 % max error,  200 iterations\n## Level 2 tesselation:  0.1 % mean error,  0.57 % max error,  200 iterations\n## Level 2 tesselation:  0.09 % mean error,  0.51 % max error,  200 iterations\n## Level 2 tesselation:  0.15 % mean error,  1 % max error,  200 iterations\n## Level 2 tesselation:  0.09 % mean error,  0.39 % max error,  200 iterations\n## Level 2 tesselation:  0.1 % mean error,  0.47 % max error,  200 iterations\n## Level 2 tesselation:  0.14 % mean error,  0.67 % max error,  200 iterations\n## Treemap successfully created\n\n\n# draw the treemap\ndrawTreemap(tm, \n  label_level = 1:2,\n  label_color = c(grey(0.95), grey(0.85)),\n  label_size = c(2, 4),\n  legend = TRUE,\n  title = \"Expenditure in € per capita, Central Europe, 2018\"\n)\n\n\n\n",
        "url": "/2019/10/08/voronoi-treemaps/"
      },
    
      {
        "title": "Latte pappa - myth or reality?",
        "excerpt": "My github activity is in free fall, my email response time is at least\ntwo days, and my stress level is lower than usual. What has happened, am\nI on vacation? Not quite, I’m in the middle of a five month parental\nleave with my almost one year old daughter Sophie. So far it’s been a\njoyful but also challenging time. Here are some thoughts about my own\nparental leave, about the conditions here in Sweden, and a comparison\nwith other European countries.\n\n",
        "content": "My github activity is in free fall, my email response time is at least\ntwo days, and my stress level is lower than usual. What has happened, am\nI on vacation? Not quite, I’m in the middle of a five month parental\nleave with my almost one year old daughter Sophie. So far it’s been a\njoyful but also challenging time. Here are some thoughts about my own\nparental leave, about the conditions here in Sweden, and a comparison\nwith other European countries.\n\n\n\nLatte pappa?!\n\nHow did I end up with 5 month of parental leave? That might sound\nlike an awful lot, and even more so in countries where institutional\nsupport for paternal leave is generally low. In Sweden, equal\nopportunities (and duties) for all genders is strongly encouraged, there\nis no specific maternal or paternal leave. The fact that dads can be\nspotted everywhere roaming the playground with their phone in one hand\nand a latte in the other (is that a word, latte?) gave rise to the\nfriendly neologism ‘latte pappa’. Personally, I chose to take five\nmonths leave because it was in good agreement with my wife’s job\nsituation and I wanted to spend as much time with the baby as possible.\nIf this is above or below the Swedish average I actually didn’t know.\nBut read on to find out.\n\nHow does it work in Sweden formally? Both parents can share up to\n480 days of paid leave. Of those 480 days, 390 are ‘fully’ paid based\non your pervious income (actually not fully but around 80%). The\nremaining 90 days are a basic flat rate of 180 SEK per day (~18 €). You\ncan apply for support and manage your account of days on line. Not a\nsingle sheet of paper required. Very convenient.\n\nFor comparison, parental leave in Germany is paid for up to 14\nmonths (420 days) that parents can share, at around 60 % of your\nprevious income. A parent has to take at least two month to get the\nbenefit. I often hear from friends that the kid’s mother takes tvelve\nmonths and the father just two, the bare minimum. We’ll have a look at\nthe actual statistics below. Application for parental leave is paper\nbased, requires you to hand in proof of your monthly income, and a\npersonal visit in the city hall is likely. Not so convenient.\n\nParental leave in Sweden and the EU\n\nI wondered how many mums and dads actually take parental leave in the\nEU, and if the situation is different between member states. We can use\nthe fantastic ´eurostats´ R package to see if there is central data\navailable. There is!\n\n# attach packages\nlibrary(tidyverse)\nlibrary(eurostat)\nlibrary(lattice)\nlibrary(latticeExtra)\nlibrary(latticetools)\nlibrary(SysbioTreemaps)\n\n\n\n\n# search and download data from eurostats\nsearch_eurostat(\"parental leave\")\n\n\n## # A tibble: 1 x 8\n##   title code  type  `last update of… `last table str… `data start` `data end`\n##   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;            &lt;chr&gt;            &lt;chr&gt;        &lt;chr&gt;     \n## 1 Pers… lfso… data… 16.02.2019       27.02.2020       2010         2010      \n## # … with 1 more variable: values &lt;chr&gt;\n\n\ndf &lt;- get_eurostat(\"lfso_10lparlea\", type = \"label\", stringsAsFactors = FALSE)\nhead(df)\n\n\n## # A tibble: 6 x 8\n##   unit    sex    age     duration  isced97          geo        time       values\n##   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;            &lt;chr&gt;      &lt;date&gt;      &lt;dbl&gt;\n## 1 Thousa… Femal… From 1… Zero mon… Pre-primary, pr… European … 2010-01-01   411.\n## 2 Thousa… Femal… From 1… Zero mon… Upper secondary… European … 2010-01-01   356.\n## 3 Thousa… Femal… From 1… Zero mon… First and secon… European … 2010-01-01    NA \n## 4 Thousa… Femal… From 1… Zero mon… No response      European … 2010-01-01    NA \n## 5 Thousa… Femal… From 1… Zero mon… All ISCED 1997 … European … 2010-01-01   817 \n## 6 Thousa… Femal… From 1… From 3 t… Pre-primary, pr… European … 2010-01-01    NA\n\n\nFirst I would like to take a lot at parental leave in Sweden, broken\ndown by gender, age, and education. We will sum up all people that did\nparental leave regardless of the duration and look at the proportion of\nmen and women. We need to reshape the data a bit by excluding summary\nvalues such as ‘all age grous’ or ‘all education levels’. We also\nexclude ‘zero months’ duration because that means no parental leave was\ntaken, while we should include the ‘no response’ group ( where it’s not\nclear how long people were absent from work).\n\n# filter data for Sweden only, and remove summary values\ndf_swe &lt;- filter(df,\n  age != \"From 15 to 64 years\",\n  geo == \"Sweden\",\n  sex != \"Total\",\n  isced97 != \"All ISCED 1997 levels\",\n  duration != \"Zero months\",\n  !is.na(values)\n)\n\n# abbreviate lengthy description\ndf_swe &lt;- mutate(df_swe,\n  age = gsub(\"From | years\", \"\", age),\n  education = c(\"tertiary\", \"no response\", \n    \"primary\", \"secondary\")[factor(isced97) %&gt;% as.numeric]\n)\n\n\nFor the fun of it we can plot the data in a treemap representation. It’s\nnot ideal for every type of data but here it works fairly well. We plot\nit using my\nSysbioTreemaps R package\nthat can plot nested Voronoi and Sunburst treemaps from a data.frame.\nBoth representations tell the same story, that men and women take\nequally often parental leave, although we do not know how long.\n\n# generate treemaps\n# ---------------------------------\n# parental leave as Voronoi treemap\ntm &lt;- voronoiTreemap(\n  data = df_swe,\n  levels = c(\"sex\", \"age\", \"education\"),\n  cell_size = \"values\",\n  shape = \"circle\",\n  error_tol = 0.001,\n  maxIteration = 200,\n  positioning = \"regular\"\n)\n\n\n## Level 1 tesselation:  0.25 % mean error,  0.25 % max error,  200 iterations\n## Level 2 tesselation:  0.07 % mean error,  0.1 % max error,  177 iterations\n## Level 3 tesselation:  0.06 % mean error,  0.09 % max error,  65 iterations\n## Level 3 tesselation:  0.06 % mean error,  0.1 % max error,  87 iterations\n## Level 3 tesselation:  0.07 % mean error,  0.1 % max error,  177 iterations\n## Level 2 tesselation:  0.06 % mean error,  0.1 % max error,  164 iterations\n## Level 3 tesselation:  0.05 % mean error,  0.09 % max error,  51 iterations\n## Level 3 tesselation:  0.07 % mean error,  0.1 % max error,  100 iterations\n## Level 3 tesselation:  0.06 % mean error,  0.1 % max error,  124 iterations\n## Treemap successfully created\n\n\n# parental leave as Sunburst treemap\ntm2 &lt;- sunburstTreemap(\n  data = df_swe,\n  levels = c(\"sex\", \"age\", \"education\"),\n  cell_size = \"values\"\n)\n\n\n## Treemap successfully created\n\n\n# draw generated treemaps\n# ---------------------------------\ndrawTreemap(\n  tm,\n  label_level = 1:3, \n  label_size = 1.5,\n  label_color = c(grey(0.95), grey(0.8), grey(0.5)),\n  border_size = 8,\n  legend = TRUE,\n  title = \"Number of parents taking leave for first kid, Eurostat 2010\",\n  layout = c(1, 2),\n  position = c(1, 1)\n)\n\n\n## Warning in drawTreemap(tm, label_level = 1:3, label_size = 1.5, label_color =\n## c(grey(0.95), : Use 'add = TRUE' if you want to add more treemaps to this page.\n\n\ndrawTreemap(\n  tm2,\n  label_level = 1, \n  label_color = grey(0.8),\n  border_size = 5,\n  legend = TRUE,\n  title = \"Number of parents taking leave for first kid, Eurostat 2010\",\n  layout = c(1, 2),\n  position = c(1, 2), \n  add = TRUE\n)\n\n\n\n\n\n\nThis data set is a good example for rich annotation because it contains\nseveral variables of metadata that we can use to interrogate it. We\ncan plot parental leave broken down by country, age, gender, duration,\nand so on. Or everything at once (that would be messy). I initially\nwondered about mums and dads taking different duration of parental\nleave, and assumed that the gender gap might be smaller in Sweden than\nin other EU contries. Now it’s time to find out.\n\n# filter for all EU countries and summary \n# values for age and education\ndf_mod &lt;- filter(df,\n  age == \"From 15 to 64 years\",\n  !grepl(\"Euro\", geo),\n  sex != \"Total\",\n  isced97 == \"All ISCED 1997 levels\",\n  !duration %in% c(\"No response\", \"Ongoing\", \"Not applicable\")\n)\n\n# change order of factor duration\ndf_mod &lt;- mutate(df_mod,\n  duration = factor(duration, unique(duration)[c(1,3,2,4,5)])\n)\n\n# turn absolute number of parents to relative\ndf_mod &lt;- mutate(df_mod, geo = gsub(\" .until.*\", \"\", geo)) %&gt;%\n  group_by(geo, sex) %&gt;%\n  mutate(rel_frequency = 100*values/sum(values, na.rm = TRUE))\n\n# parental leave \nxyplot(rel_frequency ~ factor(duration) | geo, \n  df_mod, col = c(\"orange\", \"#65CCF5\"),\n  groups = sex, as.table = TRUE,\n  between = list(x = 0.4, y = 0.4),\n  par.settings = custom.lattice(),\n  xlab = \"duration of parental leave\",\n  ylab = \"relative frequency of parents\",\n  scales = list(alternating = FALSE, x = list(rot = 35)),\n  panel = function(x, y, ...) {\n    panel.grid(h = -1, v = -1, col.line = grey(0.9))\n    panel.barchart(x, y, horizontal = FALSE, origin = 0, stack = FALSE, \n      border = NA, box.width = 0.8, ...)\n    panel.key(c(\"female\", \"male\"), col = c(\"orange\", \"#65CCF5\"), pch = 15, \n      corner = c(0.9, 0.9))\n  }\n)\n\n\n\n\nWell, the result is… disappointing. The blue bars are dads taking\nparental leave broken down by EU member state, and the overwhelming\nmajority of men take no parental leave at all. Sweden and Finland seem\nto be the top countries regarding paternal leave. But even in Sweden,\nmost men don’t take parental leave and the number of dads that do drops\nwith increasing duration.\n\nThe surprising finding is that even many mothers don’t take any\nmaternal leave. Bulgaria, Cyprus, Denmark, Greece, Iceland, who takes\ncare of your babies during the first year? If you know the answer please\nleave a comment. What is very well possible is that the data presented\nhere is outdated (2010) or that some groups are not accurately\nannotated, e.g. if a member state doesn’t collect or report data on\nduration of parental leave to Eurstat.\n",
        "url": "/2019/11/09/parental-leave/"
      },
    
      {
        "title": "How to label points on a scatterplot with R (for lattice)",
        "excerpt": "The famous ggplot2 package for R has numerous packages extending its\nbasic plot functions, including ggrepel that draws nice text labels\nfor each point of a scatterplot. But I am using lattice for many\nyears now, and came to like its look and customization options. However,\none thing I was missing all the time is a simple one-line function to\nadd small text labels to points in a scatter plot (a.k.a. dot plot,\na.k.a. xyplot() in lattice).\n\n",
        "content": "The famous ggplot2 package for R has numerous packages extending its\nbasic plot functions, including ggrepel that draws nice text labels\nfor each point of a scatterplot. But I am using lattice for many\nyears now, and came to like its look and customization options. However,\none thing I was missing all the time is a simple one-line function to\nadd small text labels to points in a scatter plot (a.k.a. dot plot,\na.k.a. xyplot() in lattice).\n\nIt’s not that there are no functions for text labels out there, it’s\njust that lattice plots are not compatible with the ggplot universe, and\nother more hacky solutions are not really appealing. Finally I got so\nfrustrated that I wrote my own panel function for text labels of points.\nHere is what I’ve gone through.\n\n\n\nThe problem\n\nIn computational biology (just as in any other data science field) we\nvery, very often encounter the situation that we want to compare two\nbiological conditions to each other, such as a control condition\nversus a treatment (e.g. bacteria grown on substrate A versus\nsubstrate B). But for each condition we have several thousands of\nmeasurements obtained in parallel, thanks to the ’Omics revolution. Now\nthe question is, which single protein or transcript is the most\ninteresting (or differentially expressed) between the two conditions?\nOne of the easiest ways to look at the data is to plot condition A\nversus B.\n\n# attach packages\nlibrary(lattice)\nlibrary(latticeExtra)\nlibrary(directlabels)\n\n# simulate data with a couple of outliers\ndf &lt;- data.frame(\n  gene = paste0(\n    sample(letters, 100, replace = TRUE),\n    sample(letters, 100, replace = TRUE),\n    sample(letters, 100, replace = TRUE)),\n  cond_A = c(rnorm(90), rnorm(10, 6)),\n  cond_B = rnorm(100),\n  pathway = rep(c(\"transcript\", \"translat\", \n    \"carbon\", \"nitrogen\", \"unknown\"), 20)\n)\n\nhead(df)\n\n\n##   gene      cond_A      cond_B    pathway\n## 1  ynl  0.81610752  0.50860298 transcript\n## 2  vcb  0.77903975  0.07852623   translat\n## 3  bik -0.70903387 -0.73387667     carbon\n## 4  bym -0.04559753 -0.31385190   nitrogen\n## 5  bft  1.04192395  1.35110333    unknown\n## 6  qit  0.35243408  1.92016239 transcript\n\n\n# change default plot symbol\ntheme &lt;- trellis.par.get()\ntheme$superpose.symbol$pch = 19\n\n# plot using lattice\nxyplot(cond_A ~ cond_B, df,\n  groups = pathway, \n  par.settings = theme,\n  auto.key = list(columns = 3))\n\n\n\n\nThe hacky approach\n\nNow we want to know quickly what these points are that appear to be\nup-regulated under condition A. The hacky way is to use a panel function\nthat we construct on the fly.\n\nxyplot(cond_A ~ cond_B, df,\n  groups = pathway, \n  par.settings = theme,\n  auto.key = list(columns = 3),\n  panel = function(x, y, ...) {\n    panel.grid(h = -1, v = -1, col.line = grey(0.9))\n    panel.xyplot(x, y, ...)\n    # function that puts text labels above/below points\n    panel.text(x, y, labels = df$gene, \n      col = grey(0.5), cex = 0.7, pos = 3, offset = 1)\n  }\n)\n\n\n\n\nThe problems are obvious. It’s inconvenient to think about proper\nplacement of labels for every new plot (below or above points, how far\naway?); Labels are overlapping with each other due to the rigid way we\nplace them; To plot only a few labels we would have to make tedious\nmanual selection of points using additional variables; Grouping is\nignored for the labels and it’s not straight forward to implement it, so\nwe have to go with the simple solution of painting them all grey. I\noften found myself moving labels around in Inkscape and deleting the\nunwanted ones, which is really not efficient if you do it twice per\nweek.\n\nThe directlabels package\n\nThere is at least one sophisticated package for drawing text labels in\nlattice and ggplot2, the directlabels package\n(link). The idea behind\nthis package is to provide functions for labeling points, lines or other\nobjects in a variety of plots, not only scatterplots. It is a well-made\nand comprehensive package with many options for customization, but it’s\nnot the right tool for our problem: It builds heavily on the idea of\ngrouping variables and will only place one label per group, not per\npoint.\n\ndotplot &lt;- xyplot(cond_A ~ cond_B, df,\n  groups = pathway,\n  par.settings = theme,\n  panel = function(x, y, ...) {\n    panel.grid(h = -1, v = -1, col.line = grey(0.9))\n    panel.xyplot(x, y, ...)\n  }\n)\n\ndirect.label(dotplot)\n\n\n\n\nThat’s not really what I want, although it is quite useful for other\npurposes. In fact we can also set groups = gene and will get\nindividual gene labels, but they are distributed over the entire plot\narea, and we lose our grouping by pathway.\n\nThe dedicated panel function\n\nIn the end I made my own panel function, panel.directlabel that you\ncan find in my lattice-tools package on github (you might also just\ndownload only the function itself if you want).\n\nrequire(devtools)\ndevtools::install_github(\"https://github.com/m-jahn/lattice-tools\")\n\n\nThe function has all the different options that I want to customize text\nlabels, like connecting lines to the points, boxes around labels,\nflexible sizing, subsetting based on x and y thresholds, and consistency\nwith grouping. The placement of labels is determined using the method\nsmart.grid from directlabels. And here is the final plot using some\nof the custom options.\n\nlibrary(latticetools)\n\nxyplot(cond_A ~ cond_B, df,\n  groups = pathway,\n  par.settings = theme,\n  labels = df$gene, cex = 0.75,\n  auto.key = list(columns = 3),\n  panel = function(x, y, ...) {\n    panel.grid(h = -1, v = -1, col.line = grey(0.9))\n    panel.xyplot(x, y, ...)\n    panel.directlabel(x, y, y_boundary = c(4, 10), \n      draw_box = TRUE, box_line = TRUE, ...)\n  }\n)\n\n\n\n\nNow we can quickly see what our points of interest are. Plus, colors\nfrom grouping are preserved for lines, boxes, and text of the label.\nLabels don’t overlap because the underlying method for placement is\n‘smart’ enough to push them to free areas. I just selected a subset of\ninteresting points to be labelled using the y_boundary option. And of\ncourse, the appearance of boxes, lines, and so on can be easily\ncustomized.\n",
        "url": "/2019/11/20/directlabels/"
      },
    
      {
        "title": "Is Sweden smarter than the rest of Europe?",
        "excerpt": "The corona virus crisis has overshadowed the life of many EU citizens\nfor quite some time now, and will likely continue to do so for the\ncoming months. The strict social distancing measures taken by many\ngovernments leave work places deserted, factories standing still and\nshops closed. However, one small country on the Northern edge of Europe\nis going it’s own way to tackle the CoV pandemic and it is highly\ninteresting how this experiment will turn out. None the least as I am\npart of that experiment.\n\n",
        "content": "The corona virus crisis has overshadowed the life of many EU citizens\nfor quite some time now, and will likely continue to do so for the\ncoming months. The strict social distancing measures taken by many\ngovernments leave work places deserted, factories standing still and\nshops closed. However, one small country on the Northern edge of Europe\nis going it’s own way to tackle the CoV pandemic and it is highly\ninteresting how this experiment will turn out. None the least as I am\npart of that experiment.\n\n\n\nNote: Original article from 10 April 2020. Figures updated 20 April\n2020.\n\n\n\nSweden goes its own way\n\nMany European countries are recently showing signs that the spreading of\nthe virus is slowing down. Countries like Denmark, Germany and Poland\nwent early in lock-down, and started testing more people. Other\ncountries were slower taking social distancing measures ramping up\ntesting. And the UK even made a complete U-turn regarding their\nstrategy, finally introducing stricter social distancing.\n\nSweden however, where I work and live with my family, decided to\nimplement only mild measures so far, still allowing up to 50 people to\ngather and not closing any shops. The reasoning here is that people are\nasked to maintain social distance without enforcing it through\nauthorities. Personal responsibility instead of law and order. Now the\nbig question for everybody living here, but particularly for expats that\nmay have a different view on Swedish society, is if this strategy will\nwork out in the end. This is a highly complex question, because the\nsuccess of a strategy is not only measured in reduction of virus spread,\nbut also how much burden is put on society and economy. Closed shops and\nruined businesses also affect public health, but more indirectly and\nlonger term.\n\nAll these questions are hard to answer and will be studied in detail by\nauthorities once the Coronovirus crisis is over. What I want to do here\nis simply compare how the Swedish strategy of voluntary distancing\ncompares to some of its direct neighbors. For this comparison I’m using\ndata on COVID-19 that the Johns\nHopkins University is collecting and sharing on github for public\nscrutiny and free use. I cloned the repository so that I can access the\nmost recent data and update if neccesary (the repo is updated every day\n12 AM).\n\ngit clone https://github.com/CSSEGISandData/COVID-19.git\n\n\nYet another visualization of CoV spread?\n\nUnfortunately yes. There is hardly a phenomen that got more news\ncoverage than COVID-19, so what’s the point of making one more graph?\nOne motivation is simply to see how the Swedish strategy will turn out\nin the end (or in the middle, where we are right now). In contrast to\nall the world maps and bubble charts, I will focus purely on Sweden, and\nsome of its neighboring countries in the EU that partly have similar\npopulation size, population density, and health care systems.\n\n# We attach some packages for\n# processing and plotting the data\nlibrary(tidyverse)\nlibrary(lattice)\nlibrary(latticeExtra)\nlibrary(latticetools)\n\n\n\n\nThe first step is to read the *.csv tables for confirmed cases and\ndeaths from the Johns Hopkins University’s data repository. It contains\nglobal time series of infections in a ‘wide’ format which is not nice to\nwork with. We need to reshape it to a ‘long’ format as it is more\ntypical for data bases. The long format has all observations of one type\nin a single column, and all descriptive variables (such as country, or\ndate) in\nothers.\n\ndf_world_cases &lt;- read_csv(\"COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global_20200420.csv\")\ndf_world_death &lt;- read_csv(\"COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global_20200420.csv\")\n\n# preview a table\nhead(df_world_cases[2:5])\n\n\n## # A tibble: 6 x 4\n##   `Country/Region`      Lat   Long `1/22/20`\n##   &lt;chr&gt;               &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;\n## 1 Afghanistan          33    65            0\n## 2 Albania              41.2  20.2          0\n## 3 Algeria              28.0   1.66         0\n## 4 Andorra              42.5   1.52         0\n## 5 Angola              -11.2  17.9          0\n## 6 Antigua and Barbuda  17.1 -61.8          0\n\n\n# remove slashes from column names\ncolnames(df_world_cases) &lt;- colnames(df_world_cases) %&gt;% gsub(\"/\", \"_\", .)\ncolnames(df_world_death) &lt;- colnames(df_world_death) %&gt;% gsub(\"/\", \"_\", .)\n\n# remove greenland and faroe islands from data sets\ndf_world_cases &lt;- df_world_cases %&gt;% filter(!Province_State %in% c(\"Greenland\", \"Faroe Islands\"))\ndf_world_death &lt;- df_world_death %&gt;% filter(!Province_State %in% c(\"Greenland\", \"Faroe Islands\"))\n\n# select only some countries of interest\ncountries = c(\"Sweden\", \"Finland\", \"Norway\", \"Denmark\", \"Germany\", \"Poland\")\ndf_world_cases &lt;- filter(df_world_cases, Country_Region %in% countries)[-1]\ndf_world_death &lt;- filter(df_world_death, Country_Region %in% countries)[-1]\n\n# reshape to long format using gather\n# we gather only dates in a single new column\nlast_date = tail(colnames(df_world_cases), 1)\ndf_world_cases &lt;- gather(df_world_cases, \"date\", \"cases\", \"1_22_20\":last_date)\ndf_world_death &lt;- gather(df_world_death, \"date\", \"cases\", \"1_22_20\":last_date)\n\n# now that confirmed cases and deaths are all in one column\n# we might as well combine the two dfs in one\ndf_world &lt;- bind_cols(\n  df_world_cases, \n  rename(df_world_death[\"cases\"], deaths = cases)\n  )\n\n# parse date-time entries\ndf_world &lt;- mutate(\n  df_world, \n  date = as.POSIXct(strptime(date, format=\"%m_%d_%y\"))\n  )\n\n\n\n\nNow that the data is in a handy format for multivariate plotting, we can\nstart to compare cases and fatalities for the selected countries. If I\nwould plot e.g. the confirmed cases on the Y axis on a linear scale, it\nwould be hard to make out differences due to the exponential nature of\ninfectious diseases (2 people infecting each 2 more = 4, then 8, 16, 32,\n64, and so on). This is why it is better to plot on a logarithmic axis.\nHere I chose log 10, so that 1 means 10^1 = 10, 2 = 100, 3 = 1000, 4 =\n10,000 and so on).\n\nplot_function = function(metric) {\n\n  xyplot(get(metric) ~ date, \n    df_world %&gt;% filter(date &gt; \"2020-02-15\"), \n    groups = Country_Region, as.table = TRUE,\n    par.settings = custom.lattice(),\n    xlab = \"\", ylab = \"log10 cases\", main = metric,\n    type = \"l\", lwd = 2, \n    scales = list(y = list(log = 10), x = list(rot = 25, cex = 0.7)),\n    yscale.components = yscale.components.log10ticks,\n    between = list(x = 0.5, y = 0.5),\n    panel = function(x, y, ...) {\n      panel.grid(h = -1, v = -1, col.line = grey(0.9))\n      panel.xyplot(x, y, ...)\n      panel.key(..., points = FALSE)\n      # draw labels for the last measured time point\n      panel.directlabel(\n        x = tail(x, 6), \n        y = tail(y, 6), labels = round(10^tail(y, 6)),\n        groups = 1:6, subscripts = 1:6, \n        cex = 0.6, draw_box = TRUE)\n      \n    }\n  )\n}\n\nprint(plot_function(\"cases\"), split = c(1,1,2,1), more = TRUE)\nprint(plot_function(\"deaths\"), split = c(2,1,2,1))\ngrid::grid.text(label = date(), x = 0.15, y = 0.04, \n  gp = grid::gpar(col = grey(0.5), cex = 0.7))\n\n\n\n\nNo exponential growth anymore\n\nIt is quite clear that Germany is dominating my ‘Northern’ European\nselection of countries in terms of cases and fatalities. The other\ncountries have lower absolute numbers and also a lower slope of the\ncurve, particularly for the cases. The flattening of the line for all\ncountries means that the disease is not spreading exponentially anymore,\nbut that the rate of new infections is slowing down. This is good.\nHowever, the main problem with this representation is that countries\nwith a large population (such as Germany) will always appear on top the\nfigure, although they might take efficient measures to combat spreading\nof COVID-19.\n\nA fairer representation is not only scaling the data logarithmically,\nbut also normalizing number of cases by population size. This can be\neasily done by dividing cases and deaths by a new variable\npopulation_size. I simply added the number of inhabitants per country\nin millions, obtained from\nwikipedia.\n\n# add new variable pop size\ndf_world &lt;- df_world %&gt;% \n  mutate(population_size = recode(Country_Region,\n    Denmark = 5.787725,\n    Finland = 5.539832,\n    Germany = 83.832481,\n    Norway = 5.411798,\n    Poland = 37.860731,\n    Sweden = 10.088474\n    )\n  )\n\n# normalize cases and deaths per million of inhabitants\ndf_world &lt;- mutate(df_world,\n    cases_per_million = cases/population_size,\n    deaths_per_million = deaths/population_size\n  )\n\nprint(plot_function(\"cases_per_million\"), split = c(1,1,2,1), more = TRUE)\nprint(plot_function(\"deaths_per_million\"), split = c(2,1,2,1))\ngrid::grid.text(label = date(), x = 0.15, y = 0.04, \n  gp = grid::gpar(col = grey(0.5), cex = 0.7))\n\n\n\n\nNow the picture looks dfferent. Normalized by population size, the\ndevelopment of new infections over time becomes very similar for all\ncountries except Poland which either managed to control new infections\nefficiently or is not testing much. For deaths per million inhabitants,\nPoland has again the lowest number together with Finland. However, here\nwe can suddenly see that Sweden’s fatality numbers are growing more\nrapidly than the ones of their neighbors, and that by now (last data\npoint: April 9, 2020) Sweden has 10 times more deaths per million\ninhabitants than Finland.\n\nToo early to draw conclusions\n\nWhile these numbers somewhat illustrate the different stance Sweden is\ntaking towards COVID-19, it is too early to draw conclusions, or even to\nrequest stronger social distancing. It is not clear yet if the higher\nnumber of deaths per million inhabitants is purely related to social\ndistancing measures (for sure it is not). It also remains to be seen\nwhich long term economic effects the crisis will have on countries with\nor without lock down. And how that in turn will affect public health,\nthe good that all governments aim to protect now.\n",
        "url": "/2020/04/08/covid-sweden/"
      },
    
  
  
  
  {
    "title": "Curriculum vitae",
    "excerpt": "\n",
    "content": "Current position\n\n\n  2016 until now - Postdoctoral researcher at Scilifelab (KTH), Stockholm, SE\n\n\nEducation and Work\n\n\n  July 2015 - Graduated Doctor rerum naturalium, at the University of Leipzig, Germany, with summa cum laude (1.0)\n  2011-2015 - PhD studies, Group of Flow Cytometry (Prof. Susann Müller), Dept. Environmental Microbiology, Helmholtz-Centre for Environmental Research, Leipzig, Thesis: ’Characterization of population heterogeneity in a\nmodel biotechnological process using Pseudomonas putida’\n  2005-2011 - Undergraduate studies in biology, Dresden University of Technology (TUD), Diploma thesis: ’Dynamic mating pheromone gradients for induction of mating projection and fluorescence in yeast’, group of Prof. Gerhard Rödel.\n\n\nConference presentations\n\n\n  2019 - NPC 14 - Nordic congress on photosynthesis, Turku, Finland\n  2018 - 4th Applied Synthetic Biology meeting - Toulouse, France\n  2015 - Single Cell VI - 6 th International Conference on Analysis of Microbial Cells at the Single Cell Level, Retz (Austria)\n  2014 - DGFZ - 24 th Annual Conference of the German Society for Cytometry, Dresden\n  2014 - ECB16 - 16 th uropean Congress on Biotechnology, Edinburgh\n  2013 - RPP7 - 7 th European Conference on Recombinant Protein Production, Ulm, Germany\n  2012 - DGFZ - 22 nd Annual Conference of the German Society for Cytometry, Bonn\n\n\nAwarded grants\n\n\n  Investigation of protein resource allocation in the model CO2 fixing bacterium Ralstonia eutropha (Swedish: Undersökning av proteiners resursfördelning i en modell för CO2-fixerande bakterier, Ralstonia eutropha). \nFunding agency: FORMAS. \nProject number: 2019-01491. \nProject leader: Michael Jahn.\nAwarded funding: 2020-01-01-2021-12-31: 2 000 000 SEK\n\n\nSocial media and platforms\n\n\n  ORCID\n  Research gate\n  github\n  Twitter\n  KTH home page\n\n\nPeer review\n\nI’m active in peer review (list as of May 2020). Check my Publons account for latest stats.\n\n\n  reviews for Frontiers in Microbiology: 1\n  reviews for Analyst: 1\n  reviews for Cytometry: 2\n  reviews for Microbial Cell Factories: 5\n\n",
    "url": "/CV/"
  },
  
  {
    "title": "About",
    "excerpt": "\n",
    "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com\n\nYou can find the source code for Minima at GitHub:\njekyll /\nminima\n\nYou can find the source code for Jekyll at GitHub:\njekyll /\njekyll\n\n",
    "url": "/about/"
  },
  
  {
    "title": "About me",
    "excerpt": "\n",
    "content": "\n\nMy name is Michael Jahn and I am a postdoctoral researcher in life sciences. Originally from Germany, I currently live in Stockholm, working at the Science for Life Laboratory and formally employed by KTH, the Royal Technical University in Sweden.\n\nMy primary field of interest is microbial biotechnology, in the widest sense. I like to work at the interphase of experimental and computational biology. I am an enthusiastic user of R statistical programming and python. I’m advocating for openness and transparency in science. When I’m not working I’m trying to raise my two kids, and travel around Sweden, Europe and elsewhere.\n\nContact\n\nGet in touch   with me via:\n\n\n  Research gate\n  github\n  Twitter\n  KTH home page\n\n\n",
    "url": "/about/"
  },
  
  {
    "title": "Blog",
    "excerpt": "\n",
    "content": "\n",
    "url": "/blog/"
  },
  
  {
    "title": "Michael Jahn, PhD | github.io",
    "excerpt": "\n",
    "content": "Quick links\n\n\n  About this page\n  Resources for scientific projects\n  My publications\n  Curriculum vitae\n\n",
    "url": "/"
  },
  
  {
    "title": "Metabolic models",
    "excerpt": "\n",
    "content": "Coming soon.\n",
    "url": "/models/"
  },
  
  {
    "title": "I have lots of redirect urls",
    "excerpt": "\n",
    "content": "Lots of redirect urls\n",
    "url": "/vendor/bundle/ruby/2.5.0/gems/jekyll-redirect-from-0.16.0/spec/fixtures/multiple_redirect_froms/"
  },
  
  {
    "title": "I only have one redirect path",
    "excerpt": "\n",
    "content": "One redirect url\n",
    "url": "/vendor/bundle/ruby/2.5.0/gems/jekyll-redirect-from-0.16.0/spec/fixtures/one_redirect_from/"
  },
  
  {
    "title": "Projects",
    "excerpt": "\n",
    "content": "This page is a collection of resources for ongoing (or finished) research projects. Most of these resources are bioinformatic pipelines related to publications.\n\nR notebooks for CRISPRi library in Synechocystis\n\nPublished as Pooled CRISPRi screening of the cyanobacterium Synechocystis sp PCC 6803 for enhanced industrial phenotypes in Nature Communications\nPreprint available at BioRxive\n\nBackground:\nWe designed a CRISPRi respression library for the cyanobacterium Synechocystis sp. PCC6803. The library is based on the inhibitory effect of the dCas9 gene and a corresponding short guide RNA (sgRNA) that conveys specificity to the enzyme. In each cell, the dCas9 enzyme will bind a unique sequence variant of the sgRNA. The dCas9-sgRNA complex then binds a region close to the promoter of the target gene and will repress transcription by physically blocking RNA polymerase. By using a pool of thousands of different sgRNAs, transcription of all genes of a bacterial strain\ncan be repressed, one at a time. The following R notebooks detail most of the data analysis for this publication.\n\n\n  Synechocystis CRISPRi library data processing\n  Synechocystis CRISPRi library enrichment analysis\n  Synechocystis CRISPRi library additional tests\n\n\nRalstonia eutropha protein resource allocation\n\nThis R notebook describes the addition and curation of COG (cluster of orthologous groups) terms for the lithoautotrophic bacterium Ralstonia eutropha, a.k.a. Cupriavidus necator.\n\n\n  Ralstonia eutropha COG re-annotation\n\n\nLinks to preliminary BioCircos maps showing the global using gene expression profile of Ralstonia eutropha. These maps were made using a modified Biocircos R package.\n\n\n  BioCircos map for Ralstonia eutropha, pHG1\n  BioCircos map for Ralstonia eutropha, chromosome 1\n  BioCircos map for Ralstonia eutropha, chromosome 2\n\n\n",
    "url": "/projects/"
  },
  
  {
    "title": "Publications",
    "excerpt": "\n",
    "content": "Lun Yao, Kiyan Shabestary, Sara M. Björk, Johannes Asplund-Samuelsson, Haakan N. Joensson, Michael Jahn, Elton P. Hudson.\nPooled CRISPRi screening of the cyanobacterium Synechocystis sp PCC 6803 for enhanced industrial phenotypes. \nNature Communications. 2020-12. \nDOI: 10.1038/s41467-020-15491-7\n\nJan Karlsen, Johannes Asplund-Samuelsson, Quentin Thomas, Michael Jahn, Elton P. Hudson.\nRibosome Profiling of Synechocystis Reveals Altered Ribosome Allocation at Carbon Starvation.\nmSystems. 2018-10-16. \nDOI: 10.1128/mSystems.00126-18\n\nMichael Jahn, Vital Vialas, Jan Karlsen, Gianluca Maddalo, Fredrik Edfors, Björn Forsström, Mathias Uhlén, Lukas Käll, Elton P. Hudson.\nGrowth of Cyanobacteria Is Constrained by the Abundance of Light and Carbon Assimilation Proteins.\nCell Reports. 2018-10. \nDOI: 10.1016/j.celrep.2018.09.040\n\nKiyan Shabestary, Josefine Anfelt, Emil Ljungqvist, Michael Jahn, Lun Yao, Elton P. Hudson. \nTargeted Repression of Essential Genes To Arrest Growth and Increase Carbon Partitioning and Biofuel Titers in Cyanobacteria. \nACS Synthetic Biology. 2018-06-06. \nDOI: 10.1021/acssynbio.8b00056\n\nJahn M, Vorpahl C, Hübschmann T, Harms H, Müller S.\nCopy number variability of expression plasmids determined by cell sorting and Droplet Digital PCR.\nMicrobial cell factories. 2016-12. \nPMID: 27993152\nPMC: PMC5168713\nDOI: 10.1186/s12934-016-0610-8\n\nLieder S, Jahn M, Koepff J, Müller S, Takors R.\nEnvironmental stress speeds up DNA replication in Pseudomonas putida in chemostat cultivations.\n2016-01. Biotechnology Journal.\nPMID: 26299279\nDOI: 10.1002/biot.201500059\n\nRödiger S, Burdukiewicz M, Blagodatskikh K, Jahn M, Schierack P.\nR as an environment for the reproducible analysis of DNA amplification experimentsR Journal\n2015-06-01. R Journal.\nISSN: 2073-4859\n\nJahn M, Günther S, Müller S.\nNon-random distribution of macromolecules as driving forces for phenotypic variation.\n2015-06. Current Opinion in Microbiology.\nPMID: 25974411\nDOI: 10.1016/j.mib.2015.04.005\n\nLindmeyer M, Jahn M, Vorpahl C, Müller S, Schmid A, Bühler B. \nVariability in subpopulation formation propagates into biocatalytic variability of engineered Pseudomonas putida strains.\n2015. Frontiers in microbiology. \nPMID: 26483771\nPMC: PMC4589675\nDOI: 10.3389/fmicb.2015.01042\n\nJahn M, Vorpahl C, Türkowsky D, Lindmeyer M, Bühler B, Harms H, Müller S. \nAccurate determination of plasmid copy number of flow-sorted cells using droplet digital PCR.\n2014-06. Analytical Chemistry.\nPMID: 24842041\nDOI: 10.1021/ac501118v\n\nLieder S, Jahn M, Seifert J, von Bergen M, Müller S, Takors R. \nSubpopulation-proteomics reveal growth rate, but not cell cycling, as a major impact on protein composition in Pseudomonas putida KT2440.\n2014. AMB Express. \nPMID: 25401072\nPMC: PMC4230896\nDOI: 10.1186/s13568-014-0071-6\n\nJahn M, Seifert J, von Bergen M, Schmid A, Bühler B, Müller S. \nSubpopulation-proteomics in prokaryotic populations.\n2013-02. Current Opinion in Biotechnology. \nPMID: 23153572\nDOI: 10.1016/j.copbio.2012.10.017\n\nJahn M, Mölle A, Rödel G, Ostermann K. \nTemporal and spatial properties of a yeast multi-cellular amplification system based on signal molecule diffusion.\n2013. Sensors.\nPMID: 24233076\nPMC: PMC3871124\nDOI: 10.3390/s131114511\n",
    "url": "/publications/"
  },
  
  {
    "title": "R packages",
    "excerpt": "\n",
    "content": "Coming soon.\n",
    "url": "/rpackages/"
  }
  
]

